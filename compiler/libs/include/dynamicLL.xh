DynamicLLNode format
{
    .value dyna;
    .next  DynamicLLNode;

    .DynamicLLNode constructor<dyna value>
    {
        this.value <- value;
        this.next  <- DynamicLLNode:(0);
    }
}

DynamicLL format
{
    .start DynamicLLNode;
    .end   DynamicLLNode:borrowed;

    .secondLast DynamicLLNode:borrowed;

    .DynamicLL constructor<>
    {
        this.start <- DynamicLLNode:(0);
        this.end   <- borrow DynamicLLNode:(0);
    }

    .empty method<> -> u32
    {
        /* for some reason can't return in one line yet */
        if(this.start == 0)
        {
            return 1;
        }
        return 0;
    }

    .push method<dyna value>
    {
        if(this.start == 0)
        {
            this.start <- DynamicLLNode(value);
            this.end   <- borrow this.start;
        }
        else
        {
            create newEnd <- DynamicLLNode(value);

            this.secondLast <- this.end;

            this.end.next <- newEnd;
            this.end      <- borrow newEnd;
        }
    }

    .pushFront method<dyna value>
    {
        create newNode <- DynamicLLNode(value);
        newNode.next <- this.start;

        if(this.end == 0)
        {
            this.end <- borrow newNode;
        }

        this.start <- newNode;
    }

    .pop method<> -> dyna
    {
        create walker <- borrow this.start;

        if(walker == 0)
        {
            print_(`[LL ERROR] Cannot pop, list is empty`);
            quit(1);
        }

        if(walker.next == 0)
        {
            create rval <- walker.value;

            this.start <- 0;
            this.end   <- 0;

            return rval;
        }
        else
        {
            while(walker.next.next != 0)
            {
                walker <- borrow walker.next;
            }

            create rval <- walker.next.value;

            walker.next <- 0;
            this.end <- walker;

            return rval;
        }
    }

    .popFront method<> -> dyna
    {
        create rval <- this.start;

        if(rval == 0)
        {
            print_(`[LL ERROR] Cannot pop, list is empty`);
            quit(1);
        }

        if(rval == this.end)
        {
            this.end <- 0;
        }
        
        this.start <- rval.next;

        return(rval.value);
    }

    .get method<u32 index> -> dyna
    {
        create walker <- borrow this.start;
        create i <- 0;

        while(walker != 0)
        {
            if(i == index)
            {
                return(walker.value);
            }
            i <- i + 1;
            walker <- borrow walker.next;
        }

        print_(`[LL ERROR] Index out of range`);
        quit(1);
    }

    .set method<u32 index, dyna value>
    {
        create walker <- borrow this.start;
        create i <- 0;

        while(walker != 0)
        {
            if(i == index)
            {
                walker.value <- value;
                return;
            }
            i <- i + 1;
            walker <- borrow walker.next;
        }

        print_(`[LL ERROR] Index out of range`);
        quit(1);
    }

    .DynamicLL operator(index_get)<u32 index> -> dyna
    {
        return(this.get(index));
    }

    .DynamicLL operator(index_set)<u32 index, dyna value>
    {
        this.set(index, value);
    }

    .forEach method<fn func>
    {
        create walker <- borrow this.start;
        create i <- 0;

        while(walker != 0)
        {
            func(walker.value, i);
            i <- i + 1;
            walker <- borrow walker.next;
        }
    }

    .delete method<u32 index>
    {
        if(index <= 0)
        {
            this.start <- this.start.next;
        }
        else
        {
            create walker <- borrow this.start;
            create i <- 0;
            index <- index - 1;

            create next;

            while(walker != 0)
            {
                next <- borrow walker.next;

                if(i == index)
                {
                    if(next == this.end)
                    {
                        this.end <- walker;
                    }
                    walker.next <- walker.next.next;
                    return;
                }
                i <- i + 1;
                walker <- borrow next;
            }
            print_(`[LL ERROR] Index out of range`);
            quit(1);
        }
    }
}